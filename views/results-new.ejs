<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Election Results | LINCSSA VOTES</title>
    <!-- Bootstrap 5 CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <!-- Font Awesome for icons -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
    />
    <!-- Google Fonts: Outfit and JetBrains Mono -->
    <link
      href="https://fonts.googleapis.com/css2?family=Outfit:wght@300;400;500;600;700;800&family=JetBrains+Mono:wght@400;500&display=swap"
      rel="stylesheet"
    />
    <!-- AOS Animation library -->
    <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet" />
    <!-- Chart.js for data visualization -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
    <!-- Ultra-modern voting styles -->
    <link rel="stylesheet" href="/styles/vote-enhance-v2.css" />
    <style>
      /* Specific styles for results page */
      body {
        background: linear-gradient(135deg, #0f172a, #1e293b);
        color: #e2e8f0;
      }

      .results-heading {
        text-align: center;
        margin-bottom: 4rem;
      }

      .results-heading h1 {
        font-size: 3.5rem;
        font-weight: 800;
        margin-bottom: 1.5rem;
        background: linear-gradient(90deg, var(--primary), var(--secondary));
        -webkit-background-clip: text;
        background-clip: text;
        -webkit-text-fill-color: transparent;
        animation: gradient-shift 3s ease infinite;
        background-size: 200% 200%;
      }

      .results-heading p {
        font-size: 1.6rem;
        color: #94a3b8;
        max-width: 800px;
        margin: 0 auto;
      }

      .stats-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-bottom: 3rem;
      }

      .stat-card {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
      }

      .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 15px rgba(0, 0, 0, 0.2);
      }

      .stat-card h4 {
        font-size: 1rem;
        color: #94a3b8;
        margin-bottom: 0.5rem;
      }

      .stat-card p {
        font-size: 2.5rem;
        font-weight: 700;
        margin: 0;
      }

      .stat-card i {
        font-size: 1.8rem;
        margin-right: 0.5rem;
        color: var(--secondary);
      }

      .position-section {
        background: rgba(15, 23, 42, 0.7);
        border-radius: 16px;
        padding: 2rem;
        margin-bottom: 3rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
      }

      .position-title {
        font-size: 2.2rem;
        font-weight: 700;
        margin-bottom: 2rem;
        color: #f8fafc;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        padding-bottom: 1rem;
        display: flex;
        align-items: center;
      }

      .position-title i {
        font-size: 1.8rem;
        margin-right: 0.5rem;
        color: var(--primary);
      }

      .chart-container {
        background: rgba(30, 41, 59, 0.5);
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        height: 300px;
        position: relative;
      }

      .chart-loading {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background: rgba(30, 41, 59, 0.7);
        border-radius: 12px;
        z-index: 5;
        opacity: 1;
        transition: opacity 0.5s ease;
      }

      .chart-loading.hidden {
        opacity: 0;
        pointer-events: none;
      }

      .contestant-card {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 12px;
        padding: 1.2rem;
        margin-bottom: 1rem;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
      }

      .contestant-card:hover {
        transform: translateY(-3px);
        background: rgba(255, 255, 255, 0.08);
      }

      .contestant-card.winner {
        background: rgba(var(--primary-rgb), 0.15);
      }

      .contestant-card.winner::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 4px;
        height: 100%;
        background: linear-gradient(
          to bottom,
          var(--primary),
          var(--secondary)
        );
      }

      .contestant-avatar {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        object-fit: cover;
        border: 3px solid rgba(var(--primary-rgb), 0.5);
      }

      .contestant-name {
        font-size: 1.2rem;
        font-weight: 600;
        margin: 0;
      }

      .contestant-nickname {
        font-size: 0.9rem;
        color: #94a3b8;
        margin-bottom: 0.5rem;
      }

      .vote-count {
        font-family: "JetBrains Mono", monospace;
        font-weight: 700;
        font-size: 1.4rem;
        color: white;
      }

      .vote-percentage {
        font-family: "JetBrains Mono", monospace;
        font-size: 1.1rem;
        color: var(--secondary);
      }

      .progress {
        height: 8px;
        background-color: rgba(255, 255, 255, 0.1);
        margin-top: 0.5rem;
      }

      .progress-bar {
        background: linear-gradient(90deg, var(--primary), var(--secondary));
        border-radius: 8px;
      }

      .winner-badge {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: rgba(16, 185, 129, 0.2);
        color: #10b981;
        font-size: 0.8rem;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        display: inline-flex;
        align-items: center;
      }

      .winner-badge i {
        margin-right: 0.3rem;
      }

      .footer {
        text-align: center;
        margin-top: 4rem;
        padding: 2rem 0;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        color: #64748b;
      }

      .back-link {
        display: inline-flex;
        align-items: center;
        color: var(--primary);
        text-decoration: none;
        font-weight: 500;
        margin-top: 1rem;
        transition: all 0.3s ease;
      }

      .back-link:hover {
        color: var(--secondary);
      }

      .back-link i {
        margin-right: 0.5rem;
      }

      @keyframes gradient-shift {
        0% {
          background-position: 0% 50%;
        }
        50% {
          background-position: 100% 50%;
        }
        100% {
          background-position: 0% 50%;
        }
      }

      @media (max-width: 768px) {
        .results-heading h1 {
          font-size: 2.5rem;
        }

        .results-heading p {
          font-size: 1.2rem;
        }

        .stat-card p {
          font-size: 2rem;
        }

        .position-title {
          font-size: 1.8rem;
        }

        .chart-container {
          height: 250px;
          margin-bottom: 1.5rem;
        }

        .contestant-card {
          padding: 0.8rem;
        }

        .contestant-name {
          font-size: 1.1rem;
        }

        .contestant-avatar {
          width: 50px;
          height: 50px;
        }

        .vote-count {
          font-size: 1.2rem;
        }

        .vote-percentage {
          font-size: 0.9rem;
        }
      }

      @media (max-width: 576px) {
        .results-heading h1 {
          font-size: 2rem;
        }

        .stats-container {
          grid-template-columns: repeat(2, 1fr);
        }

        .chart-container {
          height: 220px;
        }

        .contestant-avatar {
          width: 45px;
          height: 45px;
        }

        .contestant-nickname {
          font-size: 0.8rem;
        }

        .winner-badge {
          font-size: 0.7rem;
          padding: 0.2rem 0.5rem;
        }
      }
    </style>
  </head>
  <body>
    <!-- Page loading overlay -->
    <div
      id="loading-overlay"
      class="position-fixed top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center"
      style="background: rgba(15, 23, 42, 0.9); z-index: 9999"
    >
      <div class="text-center">
        <div
          class="spinner-border text-light mb-3"
          style="width: 3rem; height: 3rem"
          role="status"
        >
          <span class="visually-hidden">Loading...</span>
        </div>
        <h4 class="text-light">Loading Results...</h4>
      </div>
    </div>

    <div class="container py-5">
      <div class="results-heading" data-aos="fade-up">
        <h1>LINCSSA Election Results</h1>
        <p><%= settings.electionTitle || 'LINCSSA Elections' %></p>
        <button id="refresh-results" class="btn btn-sm btn-outline-light mt-3">
          <i class="fas fa-sync-alt me-2"></i> Refresh Results
        </button>
      </div>

      <!-- Stats Cards -->
      <div class="stats-container" data-aos="fade-up" data-aos-delay="200">
        <div class="stat-card">
          <h4>Total Positions</h4>
          <p>
            <i class="fas fa-sitemap"></i> <%= positionsWithResults ?
            positionsWithResults.length : 0 %>
          </p>
        </div>
        <div class="stat-card">
          <h4>Total Voters</h4>
          <p>
            <i class="fas fa-users"></i> <%= typeof voterCount !== 'undefined' ?
            voterCount : 0 %>
          </p>
        </div>
        <div class="stat-card">
          <h4>Votes Cast</h4>
          <p>
            <i class="fas fa-vote-yea"></i> <%= typeof votedCount !==
            'undefined' ? votedCount : 0 %>
          </p>
        </div>
        <div class="stat-card">
          <h4>Voting Rate</h4>
          <p>
            <i class="fas fa-percent"></i> <%= typeof votingRate !== 'undefined'
            ? votingRate : 0 %>%
          </p>
        </div>
      </div>

      <% if (positionsWithResults && positionsWithResults.length > 0) { %> <%
      positionsWithResults.forEach((position, index) => { %>
      <div
        class="position-section"
        data-aos="fade-up"
        data-aos-delay="<%= 300 + (index * 100) %>"
        data-position-id="<%= position._id %>"
      >
        <h2 class="position-title">
          <i class="fas fa-trophy"></i> <%= position.title %>
        </h2>

        <div class="row mb-4">
          <div class="col-md-6">
            <div class="chart-container">
              <div class="chart-loading" id="loading-<%= position._id %>">
                <div class="spinner-border text-primary" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
                <p>Preparing chart...</p>
              </div>
              <canvas
                id="position-<%= position._id %>-chart"
                class="position-chart"
                data-position-id="<%= position._id %>"
              ></canvas>
            </div>
          </div>

          <div class="col-md-6">
            <h4 class="mb-3">Results Summary</h4>
            <div class="summary-stats bg-dark bg-opacity-25 rounded-3 p-3">
              <div class="summary-stat d-flex justify-content-between mb-2">
                <span><i class="fas fa-vote-yea me-2"></i> Total votes:</span>
                <strong><%= position.totalVotes || 0 %></strong>
              </div>
              <div class="summary-stat d-flex justify-content-between mb-2">
                <span><i class="fas fa-users me-2"></i> Contestants:</span>
                <strong
                  ><%= position.contestants ? position.contestants.length : 0
                  %></strong
                >
              </div>

              <% if (position.contestants && position.contestants.length > 0) {
              %>
              <div class="summary-stat d-flex justify-content-between mb-2">
                <span><i class="fas fa-trophy me-2"></i> Leading:</span>
                <strong class="text-success"
                  ><%= position.contestants[0].name %></strong
                >
              </div>

              <% if (position.totalVotes > 0 && position.contestants[0].votes >
              0) { %>
              <div class="summary-stat d-flex justify-content-between">
                <span><i class="fas fa-percentage me-2"></i> Leading by:</span>
                <strong class="text-info">
                  <% const leadingVotes = position.contestants[0].votes; const
                  runnerUpVotes = position.contestants.length > 1 ?
                  position.contestants[1].votes || 0 : 0; const leadPercentage =
                  Math.round((leadingVotes / position.totalVotes) * 100); const
                  margin = leadingVotes - runnerUpVotes; const marginPercentage
                  = Math.round((margin / position.totalVotes) * 100); %> <%=
                  marginPercentage %>% (<%= margin %> votes)
                </strong>
              </div>
              <% } %> <% if (position.totalVotes === 0) { %>
              <div class="alert alert-info mt-3 mb-0 py-2">
                <small
                  ><i class="fas fa-info-circle me-1"></i> No votes have been
                  cast for this position yet.</small
                >
              </div>
              <% } %> <% } else { %>
              <div class="alert alert-warning mt-3 mb-0 py-2">
                <small
                  ><i class="fas fa-exclamation-triangle me-1"></i> No
                  contestants available for this position.</small
                >
              </div>
              <% } %>
            </div>
          </div>
        </div>

        <div class="contestants-list">
          <% if (position.contestants && position.contestants.length > 0) { %>
          <% position.contestants.forEach((contestant, cIndex) => { const
          votePercentage = position.totalVotes ? Math.round((contestant.votes /
          position.totalVotes) * 100) : 0; const isWinner = cIndex === 0; %>
          <div
            class="contestant-card <%= isWinner ? 'winner' : '' %>"
            data-aos="fade-up"
            data-aos-delay="<%= 100 + (cIndex * 50) %>"
          >
            <div class="row align-items-center">
              <div class="col-md-1 col-3">
                <img
                  src="<%= contestant.photo ? `/uploads/${contestant.photo}` : '/images/logo.png' %>"
                  alt="<%= contestant.name %>"
                  class="contestant-avatar"
                  onerror="this.src='/images/logo.png'"
                />
              </div>
              <div class="col-md-5 col-9">
                <h4 class="contestant-name"><%= contestant.name %></h4>
                <% if (contestant.nickname) { %>
                <p class="contestant-nickname">"<%= contestant.nickname %>"</p>
                <% } %> <% if (isWinner) { %>
                <span class="winner-badge"
                  ><i class="fas fa-crown"></i> Leading</span
                >
                <% } %>
              </div>
              <div class="col-md-4 col-8 mt-3 mt-md-0">
                <div class="progress">
                  <div
                    class="progress-bar"
                    role="progressbar"
                    data-width="<%= votePercentage %>"
                    aria-valuenow="<%= votePercentage %>"
                    aria-valuemin="0"
                    aria-valuemax="100"
                  ></div>
                </div>
              </div>
              <div class="col-md-2 col-4 text-end mt-3 mt-md-0">
                <span class="vote-count"><%= contestant.votes || 0 %></span>
                <span class="vote-percentage">(<%= votePercentage %>%)</span>
              </div>
            </div>
          </div>
          <% }); %> <% } else { %>
          <div class="alert alert-info">
            No contestants available for this position.
          </div>
          <% } %>
        </div>
      </div>
      <% }); %> <% } else { %>
      <div class="alert alert-info" data-aos="fade-up">
        No results available at this time.
      </div>
      <% } %>

      <div class="text-center mt-5" data-aos="fade-up">
        <a href="/" class="back-link">
          <i class="fas fa-arrow-left"></i> Back to Home
        </a>
      </div>

      <footer class="footer" data-aos="fade-up">
        <p>
          © <%= new Date().getFullYear() %> LINCSSA VOTES. All rights reserved.
        </p>
      </footer>
    </div>

    <!-- Bootstrap, jQuery and Popper.js -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"></script>
    <!-- AOS Animation Library -->
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>

    <!-- Store positions data for external scripts in a way that avoids EJS parsing issues -->
    <script type="application/json" id="positions-data-json">
      <%- JSON.stringify(positionsWithResults || []).replace(/'/g, '\\\'') %>
    </script>

    <script>
      // Initialize AOS animation library
      AOS.init({
        duration: 800,
        once: true,
      });

      // Safely initialize window.positionsData for external scripts
      try {
        const positionsDataElement = document.getElementById(
          "positions-data-json"
        );
        if (positionsDataElement) {
          window.positionsData = JSON.parse(positionsDataElement.textContent);
          console.log(
            "Positions data initialized with",
            window.positionsData.length,
            "positions"
          );
        } else {
          throw new Error("Positions data element not found");
        }
      } catch (err) {
        console.error("Failed to parse positions data:", err.message);
        window.positionsData = [];
      }

      // Set up CSS for progress bars that need dynamic width
      document.addEventListener("DOMContentLoaded", function () {
        document
          .querySelectorAll(".progress-bar[data-width]")
          .forEach(function (bar) {
            const width = bar.getAttribute("data-width");
            if (width) {
              bar.style.width = width + "%";
            }
          });
      });

      // We'll let the external script handle chart creation
      // But provide a more robust fallback if it doesn't load
      let externalScriptLoaded = false;
      let chartInitializationAttempted = false;

      function loadExternalScript() {
        if (chartInitializationAttempted) return;

        const script = document.createElement("script");
        script.src = "/script/results-data-handler.js";
        script.onload = function () {
          externalScriptLoaded = true;
          console.log("External chart script loaded successfully");
        };
        script.onerror = function () {
          console.warn("Failed to load external chart script, using fallback");
          initializeChartsLocally();
        };

        // Set a timeout in case the script loads but doesn't initialize charts
        setTimeout(function () {
          if (!chartInitializationAttempted) {
            console.warn(
              "External script may have loaded but didn't initialize charts, using fallback"
            );
            initializeChartsLocally();
          }
        }, 2000);

        document.body.appendChild(script);
      }

      function initializeChartsLocally() {
        if (chartInitializationAttempted) return;
        chartInitializationAttempted = true;

        console.log("Initializing charts locally");
        if (window.positionsData && window.positionsData.length > 0) {
          window.positionsData.forEach(function (position) {
            if (position.contestants && position.contestants.length > 0) {
              createPositionChart(position._id, position);
            }
          });
        }
      }

      // Load external script with a delay to ensure DOM is ready
      document.addEventListener("DOMContentLoaded", function () {
        setTimeout(loadExternalScript, 800);
      });

      // Fallback chart creation function with better error handling
      function createPositionChart(positionId, positionData) {
        try {
          const chartElement = document.getElementById(
            `position-${positionId}-chart`
          );
          if (!chartElement) {
            console.warn(`Chart element for position ${positionId} not found`);
            return;
          }

          const ctx = chartElement.getContext("2d");
          if (!ctx) {
            console.warn(
              `Could not get 2d context for position ${positionId} chart`
            );
            return;
          }

          // Validate data
          if (
            !positionData.contestants ||
            !Array.isArray(positionData.contestants) ||
            positionData.contestants.length === 0
          ) {
            console.warn(
              `No valid contestants data for position ${positionId}`
            );
            return;
          }

          // Prepare data with safety checks
          const labels = positionData.contestants.map(function (c) {
            return c.name || c.nickname || "Unnamed Contestant";
          });

          const votes = positionData.contestants.map(function (c) {
            return typeof c.votes === "number" ? c.votes : 0;
          });

          const totalVotes = votes.reduce(function (sum, current) {
            return sum + current;
          }, 0);

          // Skip chart creation if there are no votes
          if (totalVotes === 0) {
            // Instead of a chart, display a message
            const noVotesMessage = document.createElement("div");
            noVotesMessage.className = "text-center py-5";
            noVotesMessage.innerHTML =
              '<p class="text-gray-400"><i class="fas fa-info-circle me-2"></i>No votes have been cast for this position yet</p>';
            chartElement.parentNode.replaceChild(noVotesMessage, chartElement);
            return;
          }

          // Generate colors
          const backgroundColors = generateColors(
            positionData.contestants.length
          );

          // Create chart with better defaults
          const chart = new Chart(ctx, {
            type: "doughnut",
            data: {
              labels: labels,
              datasets: [
                {
                  data: votes,
                  backgroundColor: backgroundColors,
                  borderColor: "rgba(255, 255, 255, 0.1)",
                  borderWidth: 2,
                  hoverOffset: 10,
                },
              ],
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  position: window.innerWidth < 768 ? "bottom" : "right",
                  labels: {
                    color: "#e2e8f0",
                    font: {
                      family: "'Outfit', sans-serif",
                      size: 12,
                    },
                    boxWidth: 15,
                    padding: 15,
                    // Truncate long contestant names
                    generateLabels: function (chart) {
                      const defaultLabels =
                        Chart.defaults.plugins.legend.labels.generateLabels(
                          chart
                        );
                      return defaultLabels.map(function (label) {
                        if (label.text && label.text.length > 20) {
                          label.text = label.text.substring(0, 17) + "...";
                        }
                        return label;
                      });
                    },
                  },
                },
                tooltip: {
                  callbacks: {
                    label: function (context) {
                      const label = context.label || "";
                      const value = context.raw || 0;
                      const percentage = Math.round((value / totalVotes) * 100);
                      return `${label}: ${value} votes (${percentage}%)`;
                    },
                  },
                  backgroundColor: "rgba(15, 23, 42, 0.9)",
                  titleFont: {
                    family: "'Outfit', sans-serif",
                    size: 14,
                    weight: "bold",
                  },
                  bodyFont: {
                    family: "'Outfit', sans-serif",
                    size: 12,
                  },
                  padding: 12,
                  cornerRadius: 8,
                  displayColors: true,
                },
              },
              cutout: "60%",
              animation: {
                animateScale: true,
                animateRotate: true,
                duration: 2000,
              },
            },
          });

          console.log(`Chart for position ${positionId} created successfully`);
          return chart;
        } catch (error) {
          console.error(
            `Error creating chart for position ${positionId}:`,
            error
          );
        }
      }

      // Generate a nice color palette for charts with better contrast and accessibility
      function generateColors(count) {
        // Enhanced color palette with higher contrast and better accessibility
        const baseColors = [
          "rgba(94, 96, 206, 0.9)", // Primary (enhanced)
          "rgba(76, 201, 240, 0.9)", // Secondary (enhanced)
          "rgba(249, 115, 22, 0.9)", // Orange (enhanced)
          "rgba(236, 72, 153, 0.9)", // Pink (enhanced)
          "rgba(16, 185, 129, 0.9)", // Emerald (enhanced)
          "rgba(168, 85, 247, 0.9)", // Purple (enhanced)
          "rgba(245, 158, 11, 0.9)", // Amber (enhanced)
          "rgba(239, 68, 68, 0.9)", // Red (enhanced)
          "rgba(34, 211, 238, 0.9)", // Cyan (enhanced)
          "rgba(132, 204, 22, 0.9)", // Lime (enhanced)
        ];

        // If we have more contestants than colors, generate additional colors
        if (count > baseColors.length) {
          // We'll create additional colors with different saturations and lightness
          for (var i = baseColors.length; i < count; i++) {
            // Use golden ratio for better distribution of hues
            var hue = (i * 137.5) % 360;
            // Higher saturation for better visibility
            var saturation = 75 + (i % 15);
            // Vary lightness for better contrast between adjacent colors
            var lightness = 45 + ((i * 7) % 30);

            baseColors.push(`hsla(${hue}, ${saturation}%, ${lightness}%, 0.9)`);
          }
        }

        // For 2 contestants only, use primary and secondary colors
        if (count === 2) {
          return ["rgba(94, 96, 206, 0.9)", "rgba(76, 201, 240, 0.9)"];
        }

        // For single contestant, use the primary color
        if (count === 1) {
          return ["rgba(94, 96, 206, 0.9)"];
        }

        // Return the appropriate number of colors
        var colors = [];
        for (var i = 0; i < count; i++) {
          colors.push(baseColors[i % baseColors.length]);
        }

        return colors;
      }

      // Function to dynamically adjust UI based on screen size
      function adjustUIForScreenSize() {
        const isMobile = window.innerWidth < 768;

        // Adjust any chart legends that are already created
        if (window.Chart && Chart.instances) {
          Object.values(Chart.instances).forEach((chart) => {
            if (
              chart.options &&
              chart.options.plugins &&
              chart.options.plugins.legend
            ) {
              chart.options.plugins.legend.position = isMobile
                ? "bottom"
                : "right";
              chart.update();
            }
          });
        }
      }

      // Refresh button functionality
      const refreshButton = document.getElementById("refresh-results");
      if (refreshButton) {
        refreshButton.addEventListener("click", function (e) {
          e.preventDefault();
          const button = this;

          // Show loading state
          button.disabled = true;
          button.innerHTML =
            '<i class="fas fa-spinner fa-spin me-2"></i> Refreshing...';

          // Fetch fresh data
          fetch(window.location.href, {
            headers: {
              "X-Requested-With": "XMLHttpRequest",
            },
          })
            .then((response) => {
              if (!response.ok) throw new Error("Network response was not ok");
              return response.text();
            })
            .then((html) => {
              // Parse the HTML to extract updated positions data
              const parser = new DOMParser();
              const doc = parser.parseFromString(html, "text/html");

              try {
                // Try to find the script tag with positions data
                const positionsDataScript = doc.querySelector(
                  "script#positionsData"
                );
                if (positionsDataScript) {
                  const newPositionsData = JSON.parse(
                    positionsDataScript.textContent
                  );

                  // Update positions data
                  window.positionsData = newPositionsData;

                  // Update the DOM with new results
                  updateResultsUI(newPositionsData);

                  // Success message
                  showToast("Results refreshed successfully!", "success");
                } else {
                  throw new Error("Could not find positions data in response");
                }
              } catch (error) {
                console.error("Error parsing updated data:", error);
                showToast(
                  "Could not refresh results. Please reload the page.",
                  "error"
                );
              }
            })
            .catch((error) => {
              console.error("Error refreshing results:", error);
              showToast(
                "Failed to refresh results. Please try again.",
                "error"
              );
            })
            .finally(() => {
              // Reset button state
              button.disabled = false;
              button.innerHTML =
                '<i class="fas fa-sync-alt me-2"></i> Refresh Results';
            });
        });
      }

      // Function to update UI with new data
      function updateResultsUI(positionsData) {
        // Update stats cards
        const voterCount = document
          .querySelector(".stat-card:nth-child(2) p")
          .textContent.trim();
        const votedCount = document
          .querySelector(".stat-card:nth-child(3) p")
          .textContent.trim();
        const votingRate = document
          .querySelector(".stat-card:nth-child(4) p")
          .textContent.trim();

        // Update each position section
        positionsData.forEach((position) => {
          const positionSection = document.querySelector(
            `[data-position-id="${position._id}"]`
          );
          if (!positionSection) return;

          // Update total votes
          const totalVotesElement = positionSection.querySelector(
            ".summary-stats .summary-stat:first-child strong"
          );
          if (totalVotesElement) {
            totalVotesElement.textContent = position.totalVotes || 0;
          }

          // Update contestants
          if (position.contestants && position.contestants.length > 0) {
            const contestantsList =
              positionSection.querySelector(".contestants-list");
            if (contestantsList) {
              // Get current cards for animation references
              const currentCards = Array.from(
                contestantsList.querySelectorAll(".contestant-card")
              );

              // Clear current contestants
              contestantsList.innerHTML = "";

              // Recreate contestant cards
              position.contestants.forEach((contestant, cIndex) => {
                const votePercentage = position.totalVotes
                  ? Math.round((contestant.votes / position.totalVotes) * 100)
                  : 0;
                const isWinner = cIndex === 0;

                const card = document.createElement("div");
                card.className = `contestant-card ${isWinner ? "winner" : ""}`;
                card.setAttribute("data-aos", "fade-up");
                card.setAttribute("data-aos-delay", 100 + cIndex * 50);

                card.innerHTML = `
                  <div class="row align-items-center">
                    <div class="col-md-1 col-3">
                      <img src="${
                        contestant.photo
                          ? `/uploads/${contestant.photo}`
                          : "/images/logo.png"
                      }"
                           alt="${contestant.name}"
                           class="contestant-avatar"
                           onerror="this.src='/images/logo.png'">
                    </div>
                    <div class="col-md-5 col-9">
                      <h4 class="contestant-name">${contestant.name}</h4>
                      ${
                        contestant.nickname
                          ? `<p class="contestant-nickname">"${contestant.nickname}"</p>`
                          : ""
                      }
                      ${
                        isWinner
                          ? `<span class="winner-badge"><i class="fas fa-crown"></i> Leading</span>`
                          : ""
                      }
                    </div>
                    <div class="col-md-4 col-8 mt-3 mt-md-0">
                      <div class="progress">
                        <div class="progress-bar" role="progressbar" style="width: ${votePercentage}%"
                             data-width="${votePercentage}" aria-valuenow="${votePercentage}"
                             aria-valuemin="0" aria-valuemax="100"></div>
                      </div>
                    </div>
                    <div class="col-md-2 col-4 text-end mt-3 mt-md-0">
                      <span class="vote-count">${contestant.votes || 0}</span>
                      <span class="vote-percentage">(${votePercentage}%)</span>
                    </div>
                  </div>
                `;

                contestantsList.appendChild(card);
              });

              // Reinitialize AOS for new elements
              AOS.refresh();
            }

            // Update chart
            const chartCanvas = document.getElementById(
              `position-${position._id}-chart`
            );
            if (chartCanvas) {
              // First check if there's an existing chart instance
              const existingChart = Chart.getChart(chartCanvas);
              if (existingChart) {
                // Update existing chart data
                existingChart.data.labels = position.contestants.map(
                  (c) => c.name
                );
                existingChart.data.datasets[0].data = position.contestants.map(
                  (c) => c.votes || 0
                );
                existingChart.update();
              } else {
                // Create new chart
                createPositionChart(position._id, position);
              }
            }
          }
        });
      }

      // Simple toast notification
      function showToast(message, type = "info") {
        // Create toast container if it doesn't exist
        let toastContainer = document.getElementById("toast-container");
        if (!toastContainer) {
          toastContainer = document.createElement("div");
          toastContainer.id = "toast-container";
          toastContainer.className = "position-fixed bottom-0 end-0 p-3";
          document.body.appendChild(toastContainer);
        }

        // Create toast element
        const toast = document.createElement("div");
        toast.className = `toast align-items-center text-white bg-${
          type === "success" ? "success" : type === "error" ? "danger" : "info"
        } border-0`;
        toast.setAttribute("role", "alert");
        toast.setAttribute("aria-live", "assertive");
        toast.setAttribute("aria-atomic", "true");

        toast.innerHTML = `
          <div class="d-flex">
            <div class="toast-body">
              ${message}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
          </div>
        `;

        toastContainer.appendChild(toast);

        // Initialize and show toast
        const bsToast = new bootstrap.Toast(toast, {
          autohide: true,
          delay: 3000,
        });
        bsToast.show();

        // Remove toast after it's hidden
        toast.addEventListener("hidden.bs.toast", function () {
          toast.remove();
        });
      }

      // Adjust UI on load and resize
      window.addEventListener("resize", adjustUIForScreenSize);
      document.addEventListener("DOMContentLoaded", adjustUIForScreenSize);

      // Hide loading overlay when page is fully loaded
      window.addEventListener("load", function () {
        const loadingOverlay = document.getElementById("loading-overlay");
        if (loadingOverlay) {
          // Add fade-out animation
          loadingOverlay.style.transition = "opacity 0.5s ease";
          loadingOverlay.style.opacity = "0";

          // Remove from DOM after animation completes
          setTimeout(() => {
            loadingOverlay.remove();
          }, 500);
        }
      });
    </script>
  </body>
</html>
