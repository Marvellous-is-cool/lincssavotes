<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>LINCSSA BASH 2.0 - Future of Voting</title>
  <link rel="stylesheet" href="/styles/style.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
  <style>
                @import url('https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css');
                :root {
  --primary-gold: #dcca87;
  --accent-gold: #ffd700;
  --neon-blue: #00f3ff;
  --deep-space: #000810;
  --cyber-purple: #9d4edd;
}

body {
  background: var(--deep-space);
  color: #fff;
  min-height: 100vh;
  overflow-x: hidden;
  position: relative;
  outline: none;
}

/* Cyberpunk Grid Background */
body::before {
  content: '';
  position: fixed;
  top: 0;
  left: 0;
  width: 200%;
  height: 200%;
  background: 
    linear-gradient(rgba(6, 11, 25, 0.8) 1px, transparent 1px),
    linear-gradient(90deg, rgba(6, 11, 25, 0.8) 1px, transparent 1px);
  background-size: 50px 50px;
  transform: perspective(100vh) rotateX(60deg) translateY(-50%) translateX(-25%);
  animation: gridMove 20s linear infinite;
  z-index: -1;
}

@keyframes gridMove {
  0% { transform: perspective(100vh) rotateX(60deg) translateY(-50%) translateX(-25%) translateZ(0px); }
  100% { transform: perspective(100vh) rotateX(60deg) translateY(-50%) translateX(-25%) translateZ(1000px); }
}

/* Futuristic Container */
.container {
  background: rgba(0, 0, 0, 0.7);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(220, 202, 135, 0.3);
  border-radius: 25px;
  padding: 2rem;
  position: relative;
  overflow: hidden;
  transform-style: preserve-3d;
  animation: containerFloat 6s ease-in-out infinite;
}

.container::before {
  content: '';
  position: absolute;
  inset: -10px;
  background: linear-gradient(45deg, transparent, var(--primary-gold), transparent);
  animation: borderGlow 6s linear infinite;
  z-index: -1;
  filter: blur(20px);
}

/* Holographic Title */
h1 {
  color: var(--primary-gold);
  font-size: 3.5rem;
  text-align: center;
  position: relative;
  margin-bottom: 2rem;
  text-shadow: 
    0 0 10px rgba(220, 202, 135, 0.5),
    0 0 20px rgba(220, 202, 135, 0.3),
    0 0 30px rgba(220, 202, 135, 0.1);
  animation: titleFloat 4s ease-in-out infinite;
}

h1::before {
  content: attr(data-text);
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  filter: blur(8px);
  animation: glitchText 5s infinite;
}

/* Futuristic Form Elements */
.form-select {
  background: rgba(0, 0, 0, 0.8);
  border: 2px solid var(--primary-gold);
  color: var(--primary-gold);
  border-radius: 15px;
  padding: 1rem;
  transition: all 0.3s ease;
  cursor: pointer;
  animation: selectPulse 2s infinite;
  outline: none;
  -webkit-outline: none; /* For WebKit browsers */
  -moz-outline: none; /* For Firefox */
}

.form-select:focus::-webkit-focus-ring-color {
  outline: none;
}

.form-select:hover {
  transform: scale(1.02);
  box-shadow: 0 0 20px rgba(220, 202, 135, 0.3);
}

.form-select option {
  background: var(--deep-space);
  color: var(--primary-gold);
  padding: 1rem;
}

/* Enhanced Submit Button */
.btn-primary {
  background: transparent;
  border: 2px solid var(--primary-gold);
  color: var(--primary-gold);
  padding: 1rem 3rem;
  position: relative;
  overflow: hidden;
  transition: all 0.3s ease;
  transform-style: preserve-3d;
}

.btn-primary::before {
  content: '';
  position: absolute;
  top: -100%;
  left: -100%;
  width: 300%;
  height: 300%;
  background: linear-gradient(45deg, transparent, rgba(220, 202, 135, 0.3), transparent);
  transform: rotate(45deg);
  animation: buttonShine 3s infinite;
}

.btn-primary:hover {
  background: var(--primary-gold);
  color: var(--deep-space);
  transform: translateY(-5px);
  box-shadow: 
    0 5px 20px rgba(220, 202, 135, 0.3),
    0 0 50px rgba(220, 202, 135, 0.1);
    outline: none;
    -webkit-outline: none; /* For WebKit browsers */
    -moz-outline: none; /* For Firefox */
}

/* Floating Particles System */
.particle {
  position: fixed;
  pointer-events: none;
  opacity: 0;
  animation: particleFloat 10s infinite;
}

/* Enhanced Animations */
@keyframes containerFloat {
  0%, 100% { transform: translateY(0) rotate(0deg); }
  50% { transform: translateY(-10px) rotate(0.5deg); }
}

@keyframes titleFloat {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-10px); }
}

@keyframes glitchText {
  0%, 100% { clip-path: inset(0 0 0 0); }
  20% { clip-path: inset(20% 0 0 0); }
  40% { clip-path: inset(0 20% 0 0); }
  60% { clip-path: inset(0 0 20% 0); }
  80% { clip-path: inset(0 0 0 20%); }
}

@keyframes buttonShine {
  0% { transform: translateX(-100%) rotate(45deg); }
  100% { transform: translateX(100%) rotate(45deg); }
}

@keyframes selectPulse {
  0%, 100% { box-shadow: 0 0 20px rgba(220, 202, 135, 0.1); }
  50% { box-shadow: 0 0 30px rgba(220, 202, 135, 0.3); }
}

@keyframes particleFloat {
  0% { 
    opacity: 0;
    transform: translateY(0) rotate(0deg);
  }
  50% { 
    opacity: 0.5;
    transform: translateY(-100vh) rotate(360deg);
  }
  100% { 
    opacity: 0;
    transform: translateY(-200vh) rotate(720deg);
  }
}

/* Responsive Enhancements */
@media (max-width: 768px) {
  h1 { font-size: 2rem; }
  .container { padding: 1rem; }
  .btn-primary { padding: 0.8rem 2rem; }
}

      .overlay-container {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.85);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
  perspective: 1000px;
}

.overlay-content {
  background: var(--background);
  padding: 2.5rem;
  border-radius: 25px;
  max-width: 90%;
  width: 600px;
  position: relative;
  box-shadow: 0 15px 35px rgba(0,0,0,0.3);
  transform-style: preserve-3d;
  animation: floatIn 1s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  overflow: hidden;
}

.overlay-content::before {
  content: '';
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: linear-gradient(
    45deg,
    transparent,
    rgba(255,255,255,0.1),
    transparent
  );
  transform: rotate(45deg);
  animation: shine 3s infinite;
}

.overlay-header {
  font-size: 2.2rem;
  font-weight: bold;
  color: var(--text);
  margin-bottom: 2rem;
  text-align: center;
  position: relative;
  text-shadow: 2px 2px 0 rgba(0,0,0,0.1);
  animation: popIn 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55) 0.2s both;
}

.overlay-header .letter {
  display: inline-block;
  animation: letterWave 2s infinite;
  animation-delay: calc(0.1s * var(--i));
  margin: 0 1px; /* Add spacing between letters */
}

.overlay-header .word {
  display: inline-block;
  margin: 0 8px; /* Add spacing between words */
}

.overlay-header span {
  display: inline-block;
  animation: letterWave 2s infinite;
  animation-delay: calc(0.1s * var(--i));
}

.changes-list {
  list-style: none;
  padding: 0;
  margin: 0 0 2rem 0;
}

.changes-list li {
  margin-bottom: 1.5rem;
  padding: 1rem 1.5rem;
  position: relative;
  background: rgba(255,255,255,0.9);
  color: black;
  border-radius: 15px;
  transform-origin: left;
  animation: slideAndGlow 0.6s ease-out;
  animation-fill-mode: both;
  box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  transition: all 0.3s ease;
}

.changes-list li:hover {
  transform: translateX(10px) scale(1.02);
  box-shadow: 0 8px 20px rgba(0,0,0,0.15);
}

.changes-list li:nth-child(1) { animation-delay: 0.4s; }
.changes-list li:nth-child(2) { animation-delay: 0.6s; }

.changes-list li::before {
  content: '‚ú®';
  position: absolute;
  left: -30px;
  font-size: 1.5em;
  animation: sparkle 1.5s ease-in-out infinite;
}

.changes-list li:nth-child(2)::before {
  content: 'üéà';
  animation: float 2s ease-in-out infinite;
}

.timer-container {
  text-align: center;
  margin-top: 2rem;
  position: relative;
  padding: 1rem;
}

.timer {
  font-size: 1.5rem;
  color: var(--primary);
  font-weight: bold;
  background: #dcca87;
  color: #000;
  padding: 0.8rem 1.5rem;
  border-radius: 50px;
  display: inline-block;
  box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  animation: bounce 1s infinite;
}

.timer::before {
  content: '‚è∞';
  margin-right: 10px;
  display: inline-block;
  animation: shake 1s infinite;
}

/* Enhanced Animations */
@keyframes floatIn {
  0% {
    opacity: 0;
    transform: translateY(-100px) rotate(-5deg);
  }
  50% {
    opacity: 1;
    transform: translateY(20px) rotate(2deg);
  }
  100% {
    opacity: 1;
    transform: translateY(0) rotate(0);
  }
}

@keyframes popIn {
  0% {
    opacity: 0;
    transform: scale(0.3) translateY(-100px);
  }
  60% {
    transform: scale(1.1) translateY(10px);
  }
  100% {
    opacity: 1;
    transform: scale(1) translateY(0);
  }
}

@keyframes letterWave {
  0%, 100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-10px) scale(1.1);
    color: var(--accent);
  }
}

@keyframes slideAndGlow {
  0% {
    opacity: 0;
    transform: translateX(-50px);
    box-shadow: 0 0 0 rgba(74, 144, 226, 0);
  }
  50% {
    box-shadow: 0 0 20px rgba(74, 144, 226, 0.5);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  }
}

@keyframes sparkle {
  0%, 100% {
    transform: scale(1) rotate(0);
    opacity: 1;
  }
  50% {
    transform: scale(1.2) rotate(15deg);
    opacity: 0.8;
  }
}

@keyframes float {
  0%, 100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-10px);
  }
}

@keyframes shake {
  0%, 100% {
    transform: rotate(0);
  }
  25% {
    transform: rotate(15deg);
  }
  75% {
    transform: rotate(-15deg);
  }
}

@keyframes shine {
  0% {
    transform: translateX(-100%) rotate(45deg);
  }
  100% {
    transform: translateX(100%) rotate(45deg);
  }
}

@keyframes bounce {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}

.magic-exit {
  animation: magicExit 1.2s ease-in-out forwards;
}

@keyframes magicExit {
  0% {
    transform: scale(1) rotate(0);
    opacity: 1;
  }
  30% {
    transform: scale(1.2) rotate(5deg);
    opacity: 0.8;
  }
  100% {
    transform: scale(0) rotate(360deg);
    opacity: 0;
  }
}

/* Responsive Design */
@media (max-width: 768px) {
  .overlay-content {
    padding: 2rem;
    margin: 1rem;
    width: 90%;
  }
  
  .overlay-header {
    font-size: 1.8rem;
  }
  
  .changes-list li {
    padding: 0.8rem 1.2rem;
    margin-bottom: 1rem;
  }
  
  .timer {
    font-size: 1.2rem;
    padding: 0.6rem 1.2rem;
  }
}
</style>
</head>
<body>
  <%- include('header') %>
  <div class="container mt-5">
    <h1 data-text="Welcome to LINCSSA BASH 2.0">Welcome to LINCSSA BASH 2.0</h1>
    <form action="/vote" method="post" class="voting-form">
      <label for="award" class="form-label">Select an award category:</label>
      <select name="award" id="award" class="form-select">
        <option value="select" selected disabled>Select a category</option>
        <% awards.forEach(award => { %>
        <option value="<%= award.id %>"><%= award.title %></option>
        <% }); %>
      </select>
      <p class="mt-3">Kindly select an award category and cast your vote below.</p>
      <button type="submit" class="btn btn-primary mt-3">Cast Your Vote</button>
    </form>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // welcome script
    if (!localStorage.getItem('overlayShown')) {
  document.addEventListener('DOMContentLoaded', function() {
    const overlay = document.createElement('div');
    overlay.className = 'overlay-container animate__animated animate__fadeIn';
    
    // Create spans for each word and letter in the header for wave animation
    const headerWords = 'Welcome to LINCSSA BASH 2.0 / Third Batch'.split(' ');
    const animatedHeader = headerWords.map(word => {
      const letters = word.split('').map((letter, i) => 
        `<span class="letter" style="--i:${i}">${letter}</span>`
      ).join('');
      return `<span class="word">${letters}</span>`;
    }).join('');
    
    overlay.innerHTML = `
      <div class="overlay-content">
        <h1 class="overlay-header">${animatedHeader}</h1>
        <ul class="changes-list">
          <li>‚ú® New style appearances with magical animations!</li>
          <li>üéØ Vote again without entering your email again. <em>Vote on!</em></li>
          <li>‚åõ There is now a countdown to the party, watch out!</em></li>
        </ul>
        <div class="timer-container">
          <div class="timer">
            <span id="countdown">10</span> - Time flies when you're having fun!
          </div>
        </div>
      </div>
    `;
    
    document.body.appendChild(overlay);
    
    // Interactive elements
    const listItems = overlay.querySelectorAll('.changes-list li');
    listItems.forEach(item => {
      item.addEventListener('mouseover', () => {
        item.style.transform = 'translateX(10px) scale(1.02)';
      });
      item.addEventListener('mouseout', () => {
        item.style.transform = 'translateX(0) scale(1)';
      });
    });
    
    // Countdown timer with fun messages
    let timeLeft = 10;
    const countdownElement = overlay.querySelector('#countdown');
    const timerElement = overlay.querySelector('.timer');
    const funMessages = [
      "#lincssabash 2.0 all the way!",
      "Disappering soon...",
      "Just kidding, i am with you!...",
      "Not forever tho...",
      "Time flies when you're having fun!",
      "Almost gone...",
      "You're surely not seeing me again....",
      "Getting ready to disappear...",
      "Magic happening soon...",
      "See you next time!"
    ];
    
    const timer = setInterval(() => {
      if (timeLeft <= 0) {
        clearInterval(timer);
        const content = overlay.querySelector('.overlay-content');
        content.classList.add('magic-exit');
        
        setTimeout(() => {
          overlay.classList.add('animate__animated', 'animate__fadeOut');
          setTimeout(() => overlay.remove(), 1000);
        }, 800);
      } else {
        timeLeft--;
        if (countdownElement && timerElement) {
          countdownElement.textContent = timeLeft;
          timerElement.innerHTML = `
            <span id="countdown">${timeLeft}</span> - ${funMessages[9 - timeLeft]}
          `;
        }
      }
    }, 1000);
    
    // Set localStorage
    localStorage.setItem('overlayShown', 'true');
    
    // Add floating particles
    for (let i = 0; i < 20; i++) {
      const particle = document.createElement('div');
      particle.style.cssText = `
        position: absolute;
        width: 10px;
        height: 10px;
        background: ${['#FFD700', '#FF6B6B', '#4ECDC4'][Math.floor(Math.random() * 3)]};
        border-radius: 50%;
        pointer-events: none;
        left: ${Math.random() * 100}%;
        top: ${Math.random() * 100}%;
        animation: float ${2 + Math.random() * 2}s ease-in-out infinite;
        opacity: 0.6;
      `;
      overlay.appendChild(particle);
    }
  });
}
    // Create floating particles
    function createParticles() {
      const colors = ['#dcca87', '#00f3ff', '#9d4edd'];
      const particleCount = 50;

      for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        particle.style.cssText = `
          left: ${Math.random() * 100}vw;
          top: ${Math.random() * 100}vh;
          width: ${Math.random() * 5 + 2}px;
          height: ${Math.random() * 5 + 2}px;
          background: ${colors[Math.floor(Math.random() * colors.length)]};
          border-radius: 50%;
          animation-delay: ${Math.random() * 5}s;
          animation-duration: ${Math.random() * 10 + 5}s;
        `;
        document.body.appendChild(particle);
      }
    }

    // Interactive form animations
    document.addEventListener('DOMContentLoaded', () => {
      createParticles();

      const form = document.querySelector('.voting-form');
      const select = document.querySelector('.form-select');
      
      select.addEventListener('change', () => {
        select.style.transform = 'scale(1.05)';
        setTimeout(() => select.style.transform = 'scale(1)', 200);
      });

      form.addEventListener('submit', (e) => {
        const btn = document.querySelector('.btn-primary');
        btn.style.transform = 'scale(0.95)';
        setTimeout(() => btn.style.transform = 'scale(1)', 200);
      });
    });

    // Add mousemove parallax effect
    document.addEventListener('mousemove', (e) => {
      const { clientX, clientY } = e;
      const centerX = window.innerWidth / 2;
      const centerY = window.innerHeight / 2;
      
      const particles = document.querySelectorAll('.particle');
      particles.forEach(particle => {
        const moveX = (clientX - centerX) / 50;
        const moveY = (clientY - centerY) / 50;
        particle.style.transform = `translate(${moveX}px, ${moveY}px)`;
      });
    });
  </script>
</body>
</html>