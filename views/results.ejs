<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Election Results | LINCSSA VOTES</title>
    <!-- Bootstrap 5 CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <!-- Font Awesome for icons -->
    <link // Create charts for each position
    document.addEventListener('DOMContentLoaded', function() { // Process
    position data from the server const positionsData = <%-
    JSON.stringify(positionsWithResults || []) %>; if (positionsData &&
    positionsData.length > 0) { positionsData.forEach(position => { if
    (position.contestants && position.contestants.length > 0) {
    createPositionChart(position._id, position); } }); } });lesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
    />
    <!-- Google Fonts: Outfit and JetBrains Mono -->
    <link
      href="https://fonts.googleapis.com/css2?family=Outfit:wght@300;400;500;600;700;800&family=JetBrains+Mono:wght@400;500&display=swap"
      rel="stylesheet"
    />
    <!-- AOS Animation library -->
    <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet" />
    <!-- Chart.js for data visualization -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
    <!-- Ultra-modern voting styles -->
    <link rel="stylesheet" href="/styles/vote-enhance-v2.css" />
    <style>
      /* Specific styles for results page */
      body {
        background: linear-gradient(135deg, #0f172a, #1e293b);
        color: #e2e8f0;
      }

      .results-heading {
        text-align: center;
        margin-bottom: 4rem;
      }

      .results-heading h1 {
        font-size: 3.5rem;
        font-weight: 800;
        margin-bottom: 1.5rem;
        background: linear-gradient(90deg, var(--primary), var(--secondary));
        -webkit-background-clip: text;
        background-clip: text;
        -webkit-text-fill-color: transparent;
        animation: gradient-shift 3s ease infinite;
        background-size: 200% 200%;
      }

      .results-heading p {
        font-size: 1.6rem;
        color: #94a3b8;
        max-width: 800px;
        margin: 0 auto;
      }

      .stats-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-bottom: 3rem;
      }

      .stat-card {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
      }

      .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 15px rgba(0, 0, 0, 0.2);
      }

      .stat-card h4 {
        font-size: 1rem;
        color: #94a3b8;
        margin-bottom: 0.5rem;
      }

      .stat-card p {
        font-size: 2.5rem;
        font-weight: 700;
        margin: 0;
      }

      .stat-card i {
        font-size: 1.8rem;
        margin-right: 0.5rem;
        color: var(--secondary);
      }

      .position-section {
        background: rgba(15, 23, 42, 0.7);
        border-radius: 16px;
        padding: 2rem;
        margin-bottom: 3rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
      }

      .position-title {
        font-size: 2.2rem;
        font-weight: 700;
        margin-bottom: 2rem;
        color: #f8fafc;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        padding-bottom: 1rem;
        display: flex;
        align-items: center;
      }

      .position-title i {
        font-size: 1.8rem;
        margin-right: 0.5rem;
        color: var(--primary);
      }

      .chart-container {
        background: rgba(30, 41, 59, 0.5);
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        height: 300px;
      }

      .contestant-card {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 12px;
        padding: 1.2rem;
        margin-bottom: 1rem;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
      }

      .contestant-card:hover {
        transform: translateY(-3px);
        background: rgba(255, 255, 255, 0.08);
      }

      .contestant-card.winner {
        background: rgba(var(--primary-rgb), 0.15);
      }

      .contestant-card.winner::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 4px;
        height: 100%;
        background: linear-gradient(
          to bottom,
          var(--primary),
          var(--secondary)
        );
      }

      .contestant-avatar {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        object-fit: cover;
        border: 3px solid rgba(var(--primary-rgb), 0.5);
      }

      .contestant-name {
        font-size: 1.2rem;
        font-weight: 600;
        margin: 0;
      }

      .contestant-nickname {
        font-size: 0.9rem;
        color: #94a3b8;
        margin-bottom: 0.5rem;
      }

      .vote-count {
        font-family: "JetBrains Mono", monospace;
        font-weight: 700;
        font-size: 1.4rem;
        color: white;
      }

      .vote-percentage {
        font-family: "JetBrains Mono", monospace;
        font-size: 1.1rem;
        color: var(--secondary);
      }

      .progress {
        height: 8px;
        background-color: rgba(255, 255, 255, 0.1);
        margin-top: 0.5rem;
      }

      .progress-bar {
        background: linear-gradient(90deg, var(--primary), var(--secondary));
        border-radius: 8px;
      }

      .winner-badge {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: rgba(16, 185, 129, 0.2);
        color: #10b981;
        font-size: 0.8rem;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        display: inline-flex;
        align-items: center;
      }

      .winner-badge i {
        margin-right: 0.3rem;
      }

      .footer {
        text-align: center;
        margin-top: 4rem;
        padding: 2rem 0;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        color: #64748b;
      }

      .back-link {
        display: inline-flex;
        align-items: center;
        color: var(--primary);
        text-decoration: none;
        font-weight: 500;
        margin-top: 1rem;
        transition: all 0.3s ease;
      }

      .back-link:hover {
        color: var(--secondary);
      }

      .back-link i {
        margin-right: 0.5rem;
      }

      @keyframes gradient-shift {
        0% {
          background-position: 0% 50%;
        }
        50% {
          background-position: 100% 50%;
        }
        100% {
          background-position: 0% 50%;
        }
      }

      @media (max-width: 768px) {
        .results-heading h1 {
          font-size: 2.5rem;
        }

        .results-heading p {
          font-size: 1.2rem;
        }

        .stat-card p {
          font-size: 2rem;
        }

        .position-title {
          font-size: 1.8rem;
        }

        .chart-container {
          height: 250px;
        }
      }
    </style>
  </head>
  <body>
    <div class="container py-5">
      <div class="results-heading" data-aos="fade-up">
        <h1>LINCSSA Election Results</h1>
        <p><%= settings.electionTitle || 'LINCSSA Elections' %></p>
      </div>

      <!-- Stats Cards -->
      <div class="stats-container" data-aos="fade-up" data-aos-delay="200">
        <div class="stat-card">
          <h4>Total Positions</h4>
          <p>
            <i class="fas fa-sitemap"></i> <%= positionsWithResults ?
            positionsWithResults.length : 0 %>
          </p>
        </div>
        <div class="stat-card">
          <h4>Total Voters</h4>
          <p>
            <i class="fas fa-users"></i> <%= typeof voterCount !== 'undefined' ?
            voterCount : 0 %>
          </p>
        </div>
        <div class="stat-card">
          <h4>Votes Cast</h4>
          <p>
            <i class="fas fa-vote-yea"></i> <%= typeof votedCount !==
            'undefined' ? votedCount : 0 %>
          </p>
        </div>
        <div class="stat-card">
          <h4>Voting Rate</h4>
          <p>
            <i class="fas fa-percent"></i> <%= typeof votingRate !== 'undefined'
            ? votingRate : 0 %>%
          </p>
        </div>
      </div>

      <% if (positionsWithResults && positionsWithResults.length > 0) { %> <%
      positionsWithResults.forEach((position, index) => { %>
      <div
        class="position-section"
        data-aos="fade-up"
        data-aos-delay="<%= 300 + (index * 100) %>"
      >
        <h2 class="position-title">
          <i class="fas fa-trophy"></i> <%= position.title %>
        </h2>

        <div class="row mb-4">
          <div class="col-md-6">
            <div class="chart-container">
              <canvas
                id="chart-<%= position._id %>"
                class="position-chart"
              ></canvas>
            </div>
          </div>

          <div class="col-md-6">
            <h4 class="mb-3">Results Summary</h4>
            <p>
              Total votes for this position:
              <strong><%= position.totalVotes || 0 %></strong>
            </p>
            <p>
              Number of contestants:
              <strong><%= position.contestants.length %></strong>
            </p>
            <% if (position.contestants && position.contestants.length > 0) { %>
            <p>
              Leading candidate:
              <strong><%= position.contestants[0].name %></strong>
            </p>
            <% } else { %>
            <p>No contestants available</p>
            <% } %>
          </div>
        </div>

        <div class="contestants-list">
          <% if (position.contestants && position.contestants.length > 0) { %>
          <% position.contestants.forEach((contestant, cIndex) => { const
          votePercentage = position.totalVotes ? Math.round((contestant.votes /
          position.totalVotes) * 100) : 0; const isWinner = cIndex === 0; %>
          <div
            class="contestant-card <%= isWinner ? 'winner' : '' %>"
            data-aos="fade-up"
            data-aos-delay="<%= 100 + (cIndex * 50) %>"
          >
            <div class="row align-items-center">
              <div class="col-md-1 col-3">
                <img
                  src="/uploads/<%= contestant.photo %>"
                  alt="<%= contestant.name %>"
                  class="contestant-avatar"
                  onerror="this.src='/images/default.jpg'"
                />
              </div>
              <div class="col-md-5 col-9">
                <h4 class="contestant-name"><%= contestant.name %></h4>
                <% if (contestant.nickname) { %>
                <p class="contestant-nickname">"<%= contestant.nickname %>"</p>
                <% } %> <% if (isWinner) { %>
                <span class="winner-badge"
                  ><i class="fas fa-crown"></i> Leading</span
                >
                <% } %>
              </div>
              <div class="col-md-4 col-8 mt-3 mt-md-0">
                <div class="progress">
                  <div
                    class="progress-bar"
                    role="progressbar"
                    style="width: <%= votePercentage %>%"
                    aria-valuenow="<%= votePercentage %>"
                    aria-valuemin="0"
                    aria-valuemax="100"
                  ></div>
                </div>
              </div>
              <div class="col-md-2 col-4 text-end mt-3 mt-md-0">
                <span class="vote-count"><%= contestant.votes || 0 %></span>
                <span class="vote-percentage">(<%= votePercentage %>%)</span>
              </div>
            </div>
          </div>
          <% }); %> <% } else { %>
          <div class="alert alert-info">
            No contestants available for this position.
          </div>
          <% } %>
        </div>
      </div>
      <% }); %> <% } else { %>
      <div class="alert alert-info" data-aos="fade-up">
        No results available at this time.
      </div>
      <% } %>

      <div class="text-center mt-5" data-aos="fade-up">
        <a href="/" class="back-link"
          ><i class="fas fa-arrow-left"></i> Back to Home</a
        >
      </div>

      <footer class="footer" data-aos="fade-up">
        <p>
          © <%= new Date().getFullYear() %> LINCSSA VOTES. All rights reserved.
        </p>
      </footer>
    </div>

    <!-- Bootstrap, jQuery and Popper.js -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"></script>
    <!-- AOS Animation Library -->
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>

    <script>
      // Initialize AOS animation library
      AOS.init({
        duration: 800,
        once: true
      });

      // Create charts for each position
      document.addEventListener('DOMContentLoaded', function() {
        <% if (positionsWithResults && positionsWithResults.length > 0) { %>
          <% positionsWithResults.forEach(position => { %>
            <% if (position.contestants && position.contestants.length > 0) { %>
              createPositionChart('<%= position._id %>', <%- JSON.stringify(position) %>);
            <% } %>
          <% }); %>
        <% } %>
      });

      function createPositionChart(positionId, positionData) {
        const ctx = document.getElementById(`chart-${positionId}`).getContext('2d');

        // Prepare data
        const labels = positionData.contestants.map(c => c.name);
        const votes = positionData.contestants.map(c => c.votes || 0);

        // Generate colors
        const backgroundColors = generateColors(positionData.contestants.length);

        // Create chart
        const chart = new Chart(ctx, {
          type: 'doughnut',
          data: {
            labels: labels,
            datasets: [{
              data: votes,
              backgroundColor: backgroundColors,
              borderColor: 'rgba(255, 255, 255, 0.1)',
              borderWidth: 2,
              hoverOffset: 10
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                position: 'right',
                labels: {
                  color: '#e2e8f0',
                  font: {
                    family: "'Outfit', sans-serif",
                    size: 12
                  },
                  boxWidth: 15,
                  padding: 15
                }
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    const label = context.label || '';
                    const value = context.raw || 0;
                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                    const percentage = Math.round((value / total) * 100);
                    return `${label}: ${value} votes (${percentage}%)`;
                  }
                },
                backgroundColor: 'rgba(15, 23, 42, 0.9)',
                titleFont: {
                  family: "'Outfit', sans-serif",
                  size: 14,
                  weight: 'bold'
                },
                bodyFont: {
                  family: "'Outfit', sans-serif",
                  size: 12
                },
                padding: 12,
                cornerRadius: 8,
                displayColors: true
              }
            },
            cutout: '60%',
            animation: {
              animateScale: true,
              animateRotate: true,
              duration: 2000
            }
          }
        });
      }

      // Generate a nice color palette for charts
      function generateColors(count) {
        const baseColors = [
          'rgba(99, 102, 241, 0.8)',    // Indigo
          'rgba(14, 165, 233, 0.8)',    // Sky
          'rgba(249, 115, 22, 0.8)',    // Orange
          'rgba(236, 72, 153, 0.8)',    // Pink
          'rgba(16, 185, 129, 0.8)',    // Emerald
          'rgba(168, 85, 247, 0.8)',    // Purple
          'rgba(245, 158, 11, 0.8)',    // Amber
          'rgba(239, 68, 68, 0.8)',     // Red
          'rgba(34, 211, 238, 0.8)',    // Cyan
          'rgba(132, 204, 22, 0.8)'     // Lime
        ];

        let colors = [];
        for (let i = 0; i < count; i++) {
          colors.push(baseColors[i % baseColors.length]);
        }

        return colors;
      }
    </script>
  </body>
</html>
