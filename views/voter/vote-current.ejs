<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= title %> | LINCSSA VOTES</title>
    <!-- Bootstrap CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <!-- Font Awesome for icons -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
    />
    <!-- Google Fonts -->
    <link
      href="https://fonts.googleapis.com/css2?family=Outfit:wght@300;400;500;600;700;800&display=swap"
      rel="stylesheet"
    />
    <!-- AOS Animation library -->
    <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet" />

    <style>
      :root {
        --primary: #5e60ce;
        --secondary: #4cc9f0;
        --success: #10b981;
        --warning: #f59e0b;
        --error: #ef4444;
        --gray-300: #d1d5db;
        --gray-400: #9ca3af;
        --gray-500: #6b7280;
      }

      body {
        font-family: "Outfit", sans-serif;
        background-color: #0f172a;
        color: white;
        min-height: 100vh;
      }

      .gradient-text {
        background: linear-gradient(90deg, var(--primary), var(--secondary));
        -webkit-background-clip: text;
        background-clip: text;
        -webkit-text-fill-color: transparent;
      }

      .navbar {
        background-color: rgba(17, 24, 39, 0.9);
        backdrop-filter: blur(20px);
        -webkit-backdrop-filter: blur(20px);
      }

      .page-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
      }

      .header {
        text-align: center;
        margin-bottom: 3rem;
      }

      .header h1 {
        font-size: 3rem;
        font-weight: 700;
        margin-bottom: 1rem;
      }

      .progress-steps {
        display: flex;
        justify-content: center;
        margin-bottom: 3rem;
      }

      .step {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 120px;
      }

      .step-icon {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.1);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.2rem;
        margin-bottom: 0.5rem;
        position: relative;
      }

      .step-icon::after {
        content: "";
        position: absolute;
        height: 3px;
        background: rgba(255, 255, 255, 0.1);
        width: 100%;
        left: 50%;
        top: 50%;
      }

      .step:last-child .step-icon::after {
        display: none;
      }

      .step.active .step-icon {
        background: rgba(94, 96, 206, 0.2);
        color: var(--primary);
        border: 2px solid var(--primary);
      }

      .step.active .step-label {
        color: white;
        font-weight: 600;
      }

      .step-label {
        color: var(--gray-400);
        font-size: 0.9rem;
      }

      .card {
        background-color: rgba(31, 41, 55, 0.7);
        border: 1px solid rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(12px);
        -webkit-backdrop-filter: blur(12px);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        border-radius: 1rem;
        overflow: hidden;
        transition: all 0.3s ease;
        height: 100%;
      }

      .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 40px rgba(0, 0, 0, 0.3);
      }

      .card-header {
        background: rgba(94, 96, 206, 0.1);
        border-bottom: 1px solid rgba(255, 255, 255, 0.05);
        padding: 1.5rem;
        text-align: center;
      }

      .contestant-photo {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        margin: 0 auto 1rem;
        overflow: hidden;
        border: 3px solid rgba(255, 255, 255, 0.1);
      }

      .contestant-photo img {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }

      .contestant-avatar {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        margin: 0 auto 1rem;
        background: rgba(255, 255, 255, 0.05);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 3rem;
        color: var(--gray-300);
      }

      .badge-custom {
        background: rgba(94, 96, 206, 0.2);
        color: white;
        font-size: 0.8rem;
        padding: 0.4rem 0.8rem;
        border-radius: 2rem;
        margin-top: 0.5rem;
        display: inline-block;
      }

      .card-body {
        padding: 1.5rem;
        text-align: center;
      }

      .contestant-name {
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
      }

      .contestant-slogan {
        color: var(--gray-300);
        font-style: italic;
        margin-bottom: 1.5rem;
      }

      .manifesto-content {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 0.5rem;
        padding: 1rem;
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.3s ease, padding 0.3s ease;
        margin-bottom: 1rem;
      }

      .manifesto-content.show {
        max-height: 500px;
        padding: 1rem;
      }

      .btn-primary {
        background: var(--primary);
        border-color: var(--primary);
        transition: all 0.3s ease;
      }

      .btn-primary:hover {
        background: #4e50ae;
        border-color: #4e50ae;
        transform: translateY(-2px);
      }

      .btn-outline-light:hover {
        background-color: rgba(255, 255, 255, 0.1);
      }

      .footer {
        background-color: rgba(31, 41, 55, 0.7);
        border-top: 1px solid rgba(255, 255, 255, 0.05);
        padding: 1.5rem 0;
        margin-top: 4rem;
        text-align: center;
      }

      .time-display {
        font-family: "JetBrains Mono", monospace;
        font-size: 1.2rem;
        color: var(--secondary);
      }

      /* Background effect */
      .bg-dots {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: radial-gradient(
          rgba(255, 255, 255, 0.15) 2px,
          transparent 2px
        );
        background-size: 30px 30px;
        z-index: -1;
        pointer-events: none;
      }

      .bg-glow {
        position: fixed;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: radial-gradient(
          circle at center,
          rgba(94, 96, 206, 0.05) 0%,
          rgba(15, 23, 42, 0) 50%
        );
        z-index: -2;
        pointer-events: none;
      }

      /* Modal styles */
      .modal-content {
        background-color: rgba(31, 41, 55, 0.9);
        border: 1px solid rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(16px);
        -webkit-backdrop-filter: blur(16px);
      }

      .modal-header {
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      }

      .modal-footer {
        border-top: 1px solid rgba(255, 255, 255, 0.1);
      }
    </style>
  </head>
  <body>
    <!-- Background effects -->
    <div class="bg-dots"></div>
    <div class="bg-glow"></div>

    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark mb-4">
      <div class="container-fluid">
        <a class="navbar-brand" href="/dashboard">
          <div class="gradient-text fs-4 fw-bold">LINCSSA VOTES</div>
        </a>
        <button
          class="navbar-toggler"
          type="button"
          data-bs-toggle="collapse"
          data-bs-target="#navbarNav"
        >
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
          <ul class="navbar-nav me-auto">
            <li class="nav-item">
              <a class="nav-link" href="/dashboard">Dashboard</a>
            </li>
            <li class="nav-item">
              <a class="nav-link active" href="/vote">Vote</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/results">Results</a>
            </li>
          </ul>
          <div class="d-flex align-items-center">
            <div class="time-display me-3" id="current-time"></div>
            <a href="/dashboard" class="btn btn-outline-light btn-sm">
              <i class="fas fa-home me-1"></i> Dashboard
            </a>
          </div>
        </div>
      </div>
    </nav>

    <!-- Main Content -->
    <div class="page-container">
      <!-- Header -->
      <div class="header" data-aos="fade-up">
        <h1 class="gradient-text"><%= position.title %></h1>
        <p class="text-light mb-4">
          <% let defaultDescription = 'Please select your preferred candidate by
          clicking on their card below.'; %> <%= position.description ||
          defaultDescription %>
        </p>
      </div>

      <!-- Progress steps -->
      <div class="mb-5" data-aos="fade-up" data-aos-delay="100">
        <div class="progress-steps">
          <div class="step active">
            <div class="step-icon">
              <i class="fas fa-list"></i>
            </div>
            <div class="step-label">Select Candidate</div>
          </div>
          <div class="step">
            <div class="step-icon">
              <i class="fas fa-check"></i>
            </div>
            <div class="step-label">Confirm Vote</div>
          </div>
          <div class="step">
            <div class="step-icon">
              <i class="fas fa-star"></i>
            </div>
            <div class="step-label">Vote Recorded</div>
          </div>
        </div>
      </div>

      <!-- Status messages -->
      <% if (messages && (messages.error || messages.success || messages.info))
      { %>
      <div class="row mb-4">
        <div class="col-12">
          <% if (messages.error) { %>
          <div class="alert alert-danger" data-aos="fade-up">
            <i class="fas fa-exclamation-circle me-2"></i>
            <%= messages.error %>
          </div>
          <% } %> <% if (messages.success) { %>
          <div class="alert alert-success" data-aos="fade-up">
            <i class="fas fa-check-circle me-2"></i>
            <%= messages.success %>
          </div>
          <% } %> <% if (messages.info) { %>
          <div class="alert alert-info" data-aos="fade-up">
            <i class="fas fa-info-circle me-2"></i>
            <%= messages.info %>
          </div>
          <% } %>
        </div>
      </div>
      <% } %>

      <!-- Contestants Grid -->
      <div class="row g-4 mb-5">
        <% contestants.forEach((contestant, index) => { %>
        <div
          class="col-md-6 col-lg-4"
          data-aos="fade-up"
          data-aos-delay="<%= 150 + (index * 50) %>"
        >
          <div
            class="card h-100 contestant-card"
            data-contestant-id="<%= contestant._id %>"
          >
            <div class="card-header">
              <% if (contestant.photo && contestant.photo !== 'default.jpg') {
              %>
              <div class="contestant-photo">
                <img
                  src="/uploads/<%= contestant.photo %>"
                  alt="<%= contestant.name %>"
                />
              </div>
              <% } else { %>
              <div class="contestant-avatar">
                <i class="fas fa-user-circle"></i>
              </div>
              <% } %>
              <span class="badge-custom">
                <%= contestant.level || 'Candidate' %>
              </span>
            </div>
            <div class="card-body d-flex flex-column dark:text-white">
              <h3 class="contestant-name"><%= contestant.name %></h3>
              <% if (contestant.slogan) { %>
              <p class="contestant-slogan">"<%= contestant.slogan %>"</p>
              <% } %> <% if (contestant.manifesto) { %>
              <div class="mt-3 mb-4">
                <button class="btn btn-sm btn-outline-light view-manifesto-btn">
                  View Manifesto
                </button>
                <div class="manifesto-content mt-3">
                  <p class="text-start"><%= contestant.manifesto %></p>
                </div>
              </div>
              <% } %>

              <div class="mt-auto pt-3">
                <% if (position.maxSelection > 1) { %>
                <div class="form-check mb-2">
                  <input
                    class="form-check-input contestant-checkbox"
                    type="checkbox"
                    name="selectedContestants"
                    value="<%= contestant._id %>"
                    data-contestant-name="<%= contestant.name %>"
                    data-max-selections="<%= position.maxSelection %>"
                    id="contestant-<%= contestant._id %>"
                  />
                  <label
                    class="form-check-label"
                    for="contestant-<%= contestant._id %>"
                  >
                    Select this candidate
                  </label>
                </div>
                <% } else { %>
                <form action="/vote" method="POST" class="single-vote-form">
                  <input
                    type="hidden"
                    name="positionId"
                    value="<%= position._id %>"
                  />
                  <input
                    type="hidden"
                    name="contestantId"
                    value="<%= contestant._id %>"
                  />
                  <button
                    type="button"
                    class="btn btn-primary vote-button w-100"
                  >
                    <i class="fas fa-vote-yea me-2"></i> Vote for this Candidate
                  </button>
                </form>
                <% } %>
              </div>
            </div>
          </div>
        </div>
        <% }) %>
      </div>

      <% if (position.maxSelection > 1) { %>
      <!-- Multi-selection submit form -->
      <div class="card shadow-lg border-0 mb-4" data-aos="fade-up">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-center mb-3">
            <h4 class="card-title mb-0">Selection Summary</h4>
            <span class="badge bg-primary rounded-pill fs-6">
              <span id="selectionCount">0</span>/<%= position.maxSelection %>
              selected
            </span>
          </div>

          <div class="alert alert-info">
            <i class="fas fa-info-circle me-2"></i>
            You can select up to
            <strong><%= position.maxSelection %></strong> candidates for this
            position.
          </div>

          <div
            id="selectionLimitNote"
            class="alert alert-warning mt-2 d-none"
          ></div>

          <div id="selectedCandidatesContainer" class="mb-4">
            <p>No candidates selected yet.</p>
          </div>

          <div class="d-flex justify-content-end">
            <form id="multiSelectionForm" action="/vote" method="POST">
              <input
                type="hidden"
                name="positionId"
                value="<%= position._id %>"
              />
              <input type="hidden" name="multipleSelections" value="true" />
              <!-- Hidden inputs for contestant IDs will be added here via JavaScript -->
              <button
                type="button"
                id="submitMultipleVotes"
                class="btn btn-lg btn-primary"
                disabled
              >
                <i class="fas fa-vote-yea me-2"></i> Submit
                <span id="selectionCountBtn">0</span> Votes
              </button>
            </form>
          </div>
        </div>
      </div>
      <% } %>

      <!-- Back to Dashboard -->
      <div class="text-center mb-5" data-aos="fade-up">
        <a href="/vote" class="btn btn-outline-light me-3">
          <i class="fas fa-arrow-left me-2"></i> Back to Positions
        </a>
        <a href="/dashboard" class="btn btn-outline-light">
          <i class="fas fa-home me-2"></i> Dashboard
        </a>
      </div>
    </div>

    <!-- Footer -->
    <footer class="footer">
      <div class="container">
        <p class="mb-1">
          © 2025 LINCSSA VOTES - Osun State University, Ikire Campus
          Departmental Election
        </p>
        <p class="mb-0 text-muted small">Your voice matters. Make it count.</p>
      </div>
    </footer>

    <!-- Vote confirmation modal -->
    <div
      class="modal fade"
      id="voteConfirmModal"
      tabindex="-1"
      aria-labelledby="voteConfirmModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="voteConfirmModalLabel">
              Confirm Your Vote
            </h5>
            <button
              type="button"
              class="btn-close btn-close-white"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <p>
              Are you sure you want to vote for
              <span id="selectedContestant" class="fw-bold"></span>?
            </p>
            <div class="alert alert-warning">
              <i class="fas fa-exclamation-triangle me-2"></i>
              This action cannot be undone. Your vote is final.
            </div>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-outline-light"
              data-bs-dismiss="modal"
            >
              Cancel
            </button>
            <button type="button" class="btn btn-primary" id="confirmVoteBtn">
              Confirm Vote
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <!-- AOS Animation -->
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
    <!-- Multi-vote handler script -->
    <% if (position.maxSelection > 1) { %>
    <script src="/script/multi-vote-handler.js"></script>
    <% } %>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        // Initialize AOS animations
        AOS.init({
          duration: 800,
          easing: "ease-out",
          once: true,
        });

        // Setup current time display
        function updateTime() {
          const now = new Date();
          const timeElement = document.getElementById("current-time");
          if (timeElement) {
            timeElement.textContent = now.toLocaleTimeString();
          }
        }
        updateTime();
        setInterval(updateTime, 1000);

        // Setup vote confirmation modals and handling
        const contestantCards = document.querySelectorAll(".contestant-card");
        const voteConfirmModal = new bootstrap.Modal(
          document.getElementById("voteConfirmModal")
        );
        const selectedContestantSpan =
          document.getElementById("selectedContestant");
        const confirmVoteBtn = document.getElementById("confirmVoteBtn");
        let currentForm;

        // Handle checkbox selection for multi-selection voting
        const checkboxes = document.querySelectorAll(".contestant-checkbox");
        const selectedCandidatesContainer = document.getElementById(
          "selectedCandidatesContainer"
        );
        const selectionCountDisplay = document.getElementById("selectionCount");
        const multiSelectionForm =
          document.getElementById("multiSelectionForm");
        const submitMultipleVotesBtn = document.getElementById(
          "submitMultipleVotes"
        );
        let maxSelections = 1;

        if (checkboxes.length > 0) {
          // Get max selections from the first checkbox (all have the same value)
          maxSelections = parseInt(checkboxes[0].dataset.maxSelections || 1);

          // Add event listeners to checkboxes
          checkboxes.forEach((checkbox) => {
            checkbox.addEventListener("change", function () {
              updateSelectionSummary();
            });
          });

          // Initialize the selection summary
          updateSelectionSummary();

          // Handle multi-selection submission
          if (submitMultipleVotesBtn) {
            submitMultipleVotesBtn.addEventListener("click", function () {
              if (getSelectedCheckboxes().length > 0) {
                // Create confirmation message
                const selectedNames = Array.from(getSelectedCheckboxes())
                  .map((cb) => cb.dataset.contestantName)
                  .join(", ");

                selectedContestantSpan.textContent = selectedNames;
                voteConfirmModal.show();

                // When confirmed, submit the multi-selection form
                confirmVoteBtn.onclick = function () {
                  // Clear previous hidden inputs
                  const existingInputs = multiSelectionForm.querySelectorAll(
                    'input[name="contestantIds[]"]'
                  );
                  existingInputs.forEach((input) => input.remove());

                  // Add selected contestant IDs as hidden inputs
                  getSelectedCheckboxes().forEach((checkbox) => {
                    const input = document.createElement("input");
                    input.type = "hidden";
                    input.name = "contestantIds[]";
                    input.value = checkbox.value;
                    multiSelectionForm.appendChild(input);
                  });

                  multiSelectionForm.submit();
                };
              }
            });
          }
        }

        // Function to update the selection summary for multi-selection
        function updateSelectionSummary() {
          const selectedCheckboxes = getSelectedCheckboxes();
          const count = selectedCheckboxes.length;

          // Update count display
          if (selectionCountDisplay) {
            selectionCountDisplay.textContent = count;
          }

          // Update selected candidates display
          if (selectedCandidatesContainer) {
            if (count === 0) {
              selectedCandidatesContainer.innerHTML =
                "<p>No candidates selected yet.</p>";
            } else {
              const selectedList = document.createElement("ul");
              selectedList.className = "list-group";

              selectedCheckboxes.forEach((checkbox) => {
                const listItem = document.createElement("li");
                listItem.className =
                  "list-group-item d-flex justify-content-between align-items-center bg-dark text-white border-light";
                listItem.innerHTML = `
                  <span>${checkbox.dataset.contestantName}</span>
                  <span class="badge bg-primary rounded-pill">Selected</span>
                `;
                selectedList.appendChild(listItem);
              });

              selectedCandidatesContainer.innerHTML = "";
              selectedCandidatesContainer.appendChild(selectedList);
            }
          }

          // Enable or disable submit button based on selection count
          if (submitMultipleVotesBtn) {
            submitMultipleVotesBtn.disabled = count === 0;

            // Optional: Add warning if too many selections
            if (count > maxSelections) {
              submitMultipleVotesBtn.disabled = true;
              const warningMsg = document.createElement("div");
              warningMsg.className = "alert alert-danger mt-2";
              warningMsg.innerHTML = `<i class="fas fa-exclamation-triangle me-2"></i> You can select a maximum of ${maxSelections} candidates.`;

              // Remove any existing warnings
              const existingWarning =
                selectedCandidatesContainer.parentNode.querySelector(
                  ".alert-danger"
                );
              if (existingWarning) {
                existingWarning.remove();
              }

              selectedCandidatesContainer.after(warningMsg);
            } else {
              // Remove warning if selection count is valid
              const existingWarning =
                selectedCandidatesContainer.parentNode.querySelector(
                  ".alert-danger"
                );
              if (existingWarning) {
                existingWarning.remove();
              }
            }
          }
        }

        // Helper function to get selected checkboxes
        function getSelectedCheckboxes() {
          return document.querySelectorAll(".contestant-checkbox:checked");
        }

        // Handle single-vote buttons
        const voteButtons = document.querySelectorAll(".vote-button");
        voteButtons.forEach((button) => {
          const card = button.closest(".contestant-card");
          const contestantName =
            card.querySelector(".contestant-name").textContent;
          const form = button.closest("form");

          button.addEventListener("click", function () {
            currentForm = form;
            selectedContestantSpan.textContent = contestantName;
            voteConfirmModal.show();
          });
        });

        // Confirm vote button for single selection
        confirmVoteBtn.addEventListener("click", function () {
          if (
            currentForm &&
            currentForm.classList.contains("single-vote-form")
          ) {
            currentForm.submit();
          }
        });

        // View manifesto toggle functionality
        const manifestoBtns = document.querySelectorAll(".view-manifesto-btn");
        manifestoBtns.forEach((btn) => {
          btn.addEventListener("click", function () {
            const manifestoContent = this.nextElementSibling;
            manifestoContent.classList.toggle("show");
            this.textContent = manifestoContent.classList.contains("show")
              ? "Hide Manifesto"
              : "View Manifesto";
          });
        });
      });
    </script>
  </body>
</html>
